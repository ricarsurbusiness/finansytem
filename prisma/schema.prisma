generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  fullname     String
  refreshToken String?
  createdAt    DateTime @default(now())
}

model UserProvider {
  id        Int      @id @default(autoincrement())
  name      String
  num_tel   String?
  createdAt DateTime @default(now())

  transactions Transaction[]
}

model DailyCash {
  id             Int           @id @default(autoincrement())
  date           DateTime      @default(now())
  isOpen         Boolean       @default(true)
  openingCash    Float // Base inicial
  closingCash    Float? // Efectivo final
  totalSales     Float? // Total de ventas del día
  totalPurchases Float? // Total de compras del día
  reinforcements Float? // Refuerzos de caja
  createdAt      DateTime      @default(now())
  closedAt       DateTime? // Momento del cierre
  transactions   Transaction[]

  @@unique([date]) // Solo una caja por día
}

model Transaction {
  id          Int                  @id @default(autoincrement())
  type        TransactionType
  description String?
  amount      Float // Monto total de la transacción
  date        DateTime             @default(now())
  dailyCashId Int
  dailyCash   DailyCash            @relation(fields: [dailyCashId], references: [id])
  providerId  Int?
  provider    UserProvider?        @relation(fields: [providerId], references: [id])
  payments    TransactionPayment[]
}

model TransactionPayment {
  id            Int           @id @default(autoincrement())
  paymentMethod PaymentMethod
  amount        Float
  createdAt     DateTime      @default(now())
  transactionId Int
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
}

enum TransactionType {
  SALE // Venta
  PURCHASE // Compra a proveedor
  REINFORCEMENT // Refuerzo de caja
}

enum PaymentMethod {
  CASH // Efectivo
  TRANSFER // Transferencia
}
